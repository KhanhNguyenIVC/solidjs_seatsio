import "./Home.css";
import { createSignal, onMount, Show } from "solid-js";
import { Row, Col } from "solid-bootstrap";
import { useParams } from "@solidjs/router";
import solidLogo from '../logo.svg'

const Home = () => {
    /**
     * Params ID
     * 1: introduction
     * 2:
     * 3:
     * Default: introduction
     */
    const id = useParams().id
    const [titlePage, setTitlePage] = createSignal([])
    const [isIframeLoaded, setIsIframeLoaded] = createSignal(false)

    onMount(() => {
        getTitlePage()

        window.onload = function () {
            setIsIframeLoaded(true)
        }
    })

    const getTitlePage = () => {
        switch (id) {
            case '1':
                setTitlePage('Introduction')
                break
            case '2':
                setTitlePage('Control Flow')
                break
            case '3':
                setTitlePage('Lifecycles')
                break
            default:
                setTitlePage('SolidJS Essentials')
                break
        }
    }

    return (
        <>
            <h1>Basics: {titlePage}</h1>
            <p style={'color: #dc3545'}>üë®‚ÄçüíªIn development progress....</p>

            <div class='home-content'>
                {/* Essentials */}
                <Show
                    when={id == undefined}
                >
                    <Row>
                        <Col sm={4} class="card-content-basics">
                            <ul>
                                <li>L√† 1 th∆∞ vi·ªán Javascript t·∫°o n√™n giao di·ªán ng∆∞·ªùi d√πng, SolidJS tr·ª±c ti·∫øp c·∫≠p nh·∫≠t thay ƒë·ªïi UI tr√™n native DOM (kh√¥ng d√πng Virtual DOM nh∆∞ m·ªôt v√†i Javascript UI Library/ Framework kh√°c)</li>
                                <li>Cung c·∫•p c∆° ch·∫ø Reactive ch·ªãu tr√°ch nhi·ªám cho vi·ªác theo d√µi v√† t·ª± ƒë·ªông c·∫≠p nh·∫≠t thay ƒë·ªïi UI khi State ho·∫∑c Props thay ƒë·ªïi v√† Reactivity Primitives g·ªìm 3 th√†nh ph·∫ßn c·ªët l√µi l√† Signal, Memo v√† Effect</li>
                                <li>SolidJS s·ª≠ d·ª•ng JSX: JavaScript XML l√† m·ªôt c√∫ ph√°p m·ªü r·ªông cho ph√©p l·∫≠p tr√¨nh vi√™n vi·∫øt HTML trong SolidJS d·ªÖ d√†ng</li>
                                <li>√Åp d·ª•ng m√¥ h√¨nh Component Based t·∫°o n√™n c√°c UI c√≥ kh·∫£ nƒÉng t√°i s·ª≠ d·ª•ng</li>
                                <li>H·ªó tr·ª£ v√† cung c·∫•p c√°c Lifecycle Methods. H·ªó tr·ª£ Typescript, SSR</li>
                            </ul>
                        </Col>
                        <Col class="ps-0">
                            <img src={solidLogo} class="solid-logo" alt="Solid logo" />
                        </Col>
                    </Row>
                </Show>

                {/* Introduction */}
                <Show
                    when={id === '1'}
                >
                    <Row>
                        <Col sm={4} class="card-content-basics">
                            <ul>
                                {/* <li>Just like React, Solid uses JSX to render HTML in the browser. It also uses similar syntax for reactivity to update DOM in real-time. <br />
                                However, unlike React, it uses a compiled DOM instead of virtual DOM.Solid components allow only a single JSX element at the top level. <br />
                                To combat this, you can use special JSX elements called fragments.
                                </li> */}
                                <li>C≈©ng gi·ªëng nh∆∞ React, Solid s·ª≠ d·ª•ng JSX ƒë·ªÉ render HTML l√™n tr√¨nh duy·ªát web, c·∫≠p nh·∫≠t DOM in real-time. <br />
                                    Solidjs s·ª≠ d·ª•ng compiled DOM thay v√¨ virtual DOM nh∆∞ React. <br />
                                    Solidjs b·∫Øt bu·ªôc s·ª≠ d·ª•ng single JSX element (Fragment element)
                                </li>

                                {/* <li>Components  can be nested inside one another. For instance. <br />
                                Here you have a &#60;HelloWorldComponent&#62;.</li> */}
                                <li>Components l√† nh·ªØng funcions ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·ªìng v√†o c√°c component <br />
                                    V√≠ d·ª• &#60;HelloWorldComponent&#62;.</li>

                                {/* <li>Signals are the cornerstone of reactivity in Solid. They contain values that change over time. <br />
                                When you change a signal's value, it automatically updates anything that uses it.</li> */}
                                <li>Sinals d√πng ƒë·ªÉ ghi danh c√°c simple reactive state.
                                    N·∫øu gi√° tr·ªã signal thay ƒë·ªïi n√≥ s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t l·∫°i t·∫•t c·∫£ c√°c ch·ªó ƒëang s·ª≠ d·ª•ng ch√∫ng.</li>

                                {/* <li>Signals are trackable values, but they are only one half of the equation. To complement those are observers that can be updated by those trackable values. <br />
                                An effect is one such observer; it runs a side effect that depends on signals.</li> */}
                                <li>Effects: d√πng ƒë·ªÉ theo d√µi m·ªói khi Sinals thay ƒë·ªïi gi√° tr·ªã.</li>

                                {/* <li>Memos like an effect and read-only signal <br />
                                Since they are aware of both their dependencies and their observers, they can ensure that they run only once for any change. <br />
                                This makes them preferable to registering effects that write to signals. Generally, what can be derived, should be derived.
                                </li> */}
                                <li>Memos l√† k·∫øt h·ª£p c·ªßa Efect v√† Signal (getter) <br />
                                    Khi x·ª≠ l√Ω vi·ªác l·∫∑p l·∫°i, s·ª≠ d·ª•ng Memos ƒë·ªÉ l·∫•y ra gi√° tr·ªã m√† kh√¥ng c·∫ßn truy xu·∫•t l·∫°i ch√∫ng khi gi√° tr·ªã ph·ª• thu·ªôc thay ƒë·ªïi.
                                </li>
                            </ul>
                        </Col>
                        <Col class="ps-0">
                            <Show
                                when={!isIframeLoaded()}
                            >
                                <div class="text-center" style={'margin-top: 30vh'}><div class='loading-codesandbox'></div><h5 style={'color:#242424'}>Loading source code...</h5></div>
                            </Show>
                            <iframe
                                src="https://codesandbox.io/p/github/KhanhNguyenIVC/solidjs_example/main?file=%2Fsrc%2Fpages%2FIntroduction.jsx%3A1%2C1&layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522clnwjgvye0007356lrt2ibcjf%2522%252C%2522sizes%2522%253A%255B100%252C0%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522clnwjgvye0003356la1fjckbz%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522clnwjgvye0005356lpnug9m0w%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522clnwjgvye0006356lig053jzk%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%252C%2522sizes%2522%253A%255B60%252C40%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522clnwjgvye0003356la1fjckbz%2522%253A%257B%2522id%2522%253A%2522clnwjgvye0003356la1fjckbz%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522FILE%2522%252C%2522filepath%2522%253A%2522%252Fsrc%252Fpages%252FIntroduction.jsx%2522%252C%2522id%2522%253A%2522clnx113j4006y356lqf1b5cij%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%255D%252C%2522activeTabId%2522%253A%2522clnx113j4006y356lqf1b5cij%2522%257D%252C%2522clnwjgvye0006356lig053jzk%2522%253A%257B%2522id%2522%253A%2522clnwjgvye0006356lig053jzk%2522%252C%2522activeTabId%2522%253A%2522clnwjpg5h00kg356lo7cm65ru%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522TASK_PORT%2522%252C%2522taskId%2522%253A%2522dev%2522%252C%2522port%2522%253A5173%252C%2522id%2522%253A%2522clnwjpg5h00kg356lo7cm65ru%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522path%2522%253A%2522%252Fintroduction%2522%257D%255D%257D%252C%2522clnwjgvye0005356lpnug9m0w%2522%253A%257B%2522id%2522%253A%2522clnwjgvye0005356lpnug9m0w%2522%252C%2522activeTabId%2522%253A%2522clnwjpala00fc356lii2eir42%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522TASK_LOG%2522%252C%2522taskId%2522%253A%2522dev%2522%252C%2522id%2522%253A%2522clnwjpala00fc356lii2eir42%2522%252C%2522mode%2522%253A%2522permanent%2522%257D%255D%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Afalse%252C%2522showSidebar%2522%253Afalse%252C%2522sidebarPanelSize%2522%253A0%257D"
                                style="width:100%;height:100%;border:0;overflow:hidden;"
                                sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>
                        </Col>
                    </Row>
                </Show>
            </div>
        </>
    )
}

export default Home